// vm-tutorial - Virtual machine tutorial targeting CHIP-8
//
// Written in 2021 by Michael Rodriguez aka kaichiuchu <mike@kaichiuchu.dev>
//
// To the extent possible under law, the author(s) have dedicated all copyright
// and related and neighboring rights to this software to the public domain
// worldwide. This software is distributed without any warranty.
//
// You should have received a copy of the CC0 Public Domain Dedication along
// with this software. If not, see
// <http://creativecommons.org/publicdomain/zero/1.0/>.

#pragma once

#include <QDialog>

#include "audio_settings.h"
#include "general_settings.h"
#include "logger_settings.h"
#include "machine_settings.h"
#include "ui_settings_dialog.h"

/// This class handles the interaction between the user and the settings
/// dialog, which is used to configure the application.
class SettingsDialogController : public QDialog {
  Q_OBJECT

 public:
  /// The settings categories in order.
  enum SettingsCategory {
    kGeneralSettings,
    kLoggerSettings,
    kMachineSettings,
    kAudioSettings
  };

  /// Constructs the settings dialog controller.
  ///
  /// \param parent_widget The parent object of which this class is a child of
  /// it.
  explicit SettingsDialogController(QWidget* parent_widget) noexcept;

  /// The controller for the audio settings widget.
  AudioSettingsController* audio_settings_;

  /// The controller for the general settings widget.
  GeneralSettingsController* general_settings_;

  /// The controller for the logger settings widget.
  LoggerSettingsController* logger_settings_;

  /// The controller for the machine settings widget.
  MachineSettingsController* machine_settings_;

 private:
  /// Connects various signals from the interface to slots.
  void ConnectSignalsToSlots() noexcept;

  /// Adds each of the settings to the settings container.
  void AddSettingsToSettingsContainer() noexcept;

  /// The widget view as generated by the User Interface Compiler (UIC).
  Ui::SettingsDialog view_;
};
