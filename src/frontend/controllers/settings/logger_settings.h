// vm-tutorial - Virtual machine tutorial targeting CHIP-8
//
// Written in 2021 by Michael Rodriguez aka kaichiuchu <mike@kaichiuchu.dev>
//
// To the extent possible under law, the author(s) have dedicated all copyright
// and related and neighboring rights to this software to the public domain
// worldwide. This software is distributed without any warranty.
//
// You should have received a copy of the CC0 Public Domain Dedication along
// with this software. If not, see
// <http://creativecommons.org/publicdomain/zero/1.0/>.

#pragma once

#include <QWidget>

#include "ui_logger_settings.h"

/// This class handles the logic of user actions that take place in the logger
/// settings widget.
///
/// The logger settings widget allows users to configure the log level, the
/// format of the log and the visuals for aesthetic purposes or for people with
/// visual impairments.
class LoggerSettingsController : public QWidget {
  Q_OBJECT

 public:
  /// Constructs the logger settings controller.
  ///
  /// \param parent_widget The parent object of which this class is a child of
  /// it.
  explicit LoggerSettingsController(QWidget* parent_object) noexcept;

 private:
  /// Connects signals from various widgets to slots.
  void ConnectSignalsToSlots() noexcept;

  /// Populates the logger settings with the current graphics settings.
  void PopulateDataFromAppSettings() noexcept;

  /// Changes the text of the font select button to display the name and size of
  /// the font the user selected, in the style of the font.
  ///
  /// \param font The font the user selected.
  void SetLogFontInfo(const QFont& font) noexcept;

  /// Sets the color of a button.
  ///
  /// \param button The button to change its color.
  /// \param color The color to set the button to.
  void SetButtonColor(QPushButton* const button, const QColor& color) noexcept;

  /// Sets the color of a log level.
  ///
  /// This updates the button color corresponding to the log level.
  ///
  /// \param level_button The button that corresponds to the log level.
  /// \param level_name The name of the log level.
  void SelectLevelColor(QPushButton* const level_button,
                        const QString& level_name) noexcept;

  /// The widget view as generated by the User Interface Compiler (UIC).
  Ui::LoggerSettings view_;
};
