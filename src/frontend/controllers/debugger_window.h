// vm-tutorial - Virtual machine tutorial targeting CHIP-8
//
// Written in 2021 by Michael Rodriguez aka kaichiuchu <mike@kaichiuchu.dev>
//
// To the extent possible under law, the author(s) have dedicated all copyright
// and related and neighboring rights to this software to the public domain
// worldwide. This software is distributed without any warranty.
//
// You should have received a copy of the CC0 Public Domain Dedication along
// with this software. If not, see
// <http://creativecommons.org/publicdomain/zero/1.0/>.

#pragma once

#include <QMainWindow>

#include "core/impl.h"
#include "models/debugger_disasm.h"
#include "models/debugger_registers.h"
#include "models/debugger_stack.h"
#include "ui_debugger_window.h"

/// This class handles the logic of user actions that take place in the
/// debugger window.
///
/// The debugger window contains various widgets used to inspect, but not
/// modify the contents of the virtual machine.
class DebuggerWindowController : public QMainWindow {
  Q_OBJECT

 public:
  /// Constructs the debugger window.
  ///
  /// \param vm_instance The virtual machine instance.
  explicit DebuggerWindowController(chip8::VMInstance& vm_instance) noexcept;

  /// Enables or disables the debugger window.
  ///
  /// The debugger should be disabled when the emulator is running, and enabled
  /// when it is not.
  ///
  /// \param enabled \p true if the debugger should be enabled, or \p false
  /// otherwise.
  void SetEnabled(const bool enabled) noexcept;

 private:
  /// Sets up the widget from application settings.
  void SetupFromAppSettings() noexcept;

  /// The widget view as generated by the User Interface Compiler (UIC).
  Ui::DebuggerWindow view_;

  /// The model which handles the CHIP-8 disassembly.
  DebuggerDisasmModel* disasm_model_;

  /// The model which handles the CHIP-8 register data.
  DebuggerRegistersModel* registers_model_;

  /// The model which handles the CHIP-8 stack data.
  DebuggerStackModel* stack_model_;

  /// The CHIP-8 virtual machine instance.
  chip8::VMInstance& vm_instance_;
};
