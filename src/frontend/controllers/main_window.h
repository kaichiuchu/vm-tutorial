// vm-tutorial - Virtual machine tutorial targeting CHIP-8
//
// Written in 2021 by kaichiuchu <kaichiuchu@protonmail.com>
//
// To the extent possible under law, the author(s) have dedicated all copyright
// and related and neighboring rights to this software to the public domain
// worldwide. This software is distributed without any warranty.
//
// You should have received a copy of the CC0 Public Domain Dedication along
// with this software. If not, see
// <http://creativecommons.org/publicdomain/zero/1.0/>.

#pragma once

#include <QMainWindow>

#include "ui_main_window.h"

/// This class handles the logic of user actions that take place in the main
/// window. Additionally, it contains methods to report to the user various
/// events that take place.
class MainWindowController : public QMainWindow {
  Q_OBJECT

 public:
  MainWindowController() noexcept;

  /// Reports to the user that the ROM file they selected failed to open due to
  /// an I/O error.
  ///
  /// \param rom_file The ROM file that the user selected.
  /// \param error_string The error that occurred while opening the file as
  /// reported by \ref QFile.
  void ReportROMOpenError(const QString& rom_file,
                          const QString& error_string) noexcept;

  /// Reports to the user that the ROM file they selected failed to open because
  /// it would exceed the maximum size of CHIP-8 internal memory.
  ///
  /// \param rom_file The ROM file that the user selected.
  void ReportROMTooLargeError(const QString& rom_file) noexcept;

  /// Reports to the user that the ROM file they selected failed to be read in
  /// its entirety.
  ///
  /// \param rom_file The ROM file that the user selected.
  /// \param bytes_read The number of bytes that were able to be read from the
  /// file.
  /// \param bytes_expected The number of bytes that were expected to be read.
  void ReportROMBadRead(const QString& rom_file, const quint64 bytes_read,
                        const quint64 bytes_expected) noexcept;

  /// Reports to the user that the virtual machine encountered a fatal error.
  ///
  /// This method will ask the user if they wish to open the debugger to inspect
  /// the failure. If they do, the \ref OpenDebugger() signal will be emitted.
  ///
  /// \param step_result The result of the execution, refer to \ref
  /// chip8::StepResult for more details.
  void ReportExecutionFailure(const chip8::StepResult step_result) noexcept;

  /// Retrieves the renderer instance.
  ///
  /// \returns The OpenGL renderer instance.
  Renderer* GetRenderer() const noexcept { return view_.openGLWidget; }

 private:
  /// The window view as generated by UIC.
  Ui::MainWindow view_;

 signals:
  /// The user wishes to open the debugger.
  void OpenDebugger();

  /// The user has selected a ROM file to play.
  void StartROM(const QString& rom_file_path);
};